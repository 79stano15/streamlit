import streamlit as st
from qiskit import QuantumCircuit, transpile
from qiskit.quantum_info.operators import Operator
from qiskit_aer.backends import AerSimulator
from qiskit.visualization import plot_histogram
import matplotlib.pyplot as plt

# Nastavenie str√°nky Streamlit
st.title("Deutschov Algoritmus s Qiskit üöÄ")
st.header("Kvantov√Ω obvod a Matica Oracle")

# Spr√°vne definovan√© matice Oracle
constant_zero = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]  # Kon≈°tantn√° 0
constant_one = [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]  # Kon≈°tantn√° 1
balanced_cnot = [[1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]]  # Vyv√°≈æen√Ω CNOT
identity_matrix = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]  # Toto≈ænos≈•

# Vytvorenie Operator objektov
const_0 = Operator(constant_zero)
const_1 = Operator(constant_one)
balanced_op = Operator(balanced_cnot)
identity_op = Operator(identity_matrix)

# Funkcia na vytvorenie Deutschovho algoritmu
def deutsch_algorithm(oracle, label):
    qc = QuantumCircuit(2, 1)  # 2 qubity, 1 klasick√Ω register
    qc.x(1)                    # Inicializuj druh√Ω qubit do stavu |1‚ü©
    qc.h([0, 1])               # Hadamard na oba qubity
    qc.append(oracle, [1, 0])  # Aplikuj Oracle
    qc.h(0)                    # Hadamard na prv√Ω qubit
    qc.measure(0, 0)           # Meraj prv√Ω qubit
    return qc

# V√Ωber Oracle z rozhrania Streamlit
st.sidebar.header("Vyber Oracle")
oracle_choice = st.sidebar.selectbox(
    "Zvoƒæ Oracle:", ["Constant Zero", "Constant One", "Balanced CNOT", "Identity"]
)

# V√Ωber Oracle a matice
if oracle_choice == "Constant Zero":
    oracle, matrix, label = const_0, constant_zero, "Const_0"
elif oracle_choice == "Constant One":
    oracle, matrix, label = const_1, constant_one, "Const_1"
elif oracle_choice == "Balanced CNOT":
    oracle, matrix, label = balanced_op, balanced_cnot, "Balanced_CNOT"
else:
    oracle, matrix, label = identity_op, identity_matrix, "Identity"

# Vytvor Deutschov algoritmus s vybran√Ωm Oracle
qc = deutsch_algorithm(oracle, label)

# Zobrazenie matice Oracle
st.subheader(f"Matica Oracle pre: {oracle_choice}")
st.write(matrix)

# Zobrazenie kvantov√©ho obvodu
st.subheader(f"Kvantov√Ω obvod pre: {oracle_choice}")
st.pyplot(qc.draw(output='mpl'))

# Simul√°cia v√Ωsledkov pomocou AerSimulator
simulator = AerSimulator()
compiled_circuit = transpile(qc, simulator)
job = simulator.run(compiled_circuit, shots=1024)
result = job.result()
counts = result.get_counts()

# Zobrazenie histogramu v√Ωsledkov
st.header("V√Ωsledky simul√°cie")
fig, ax = plt.subplots()
plot_histogram(counts, ax=ax)
st.pyplot(fig)

# Zobrazenie v√Ωstupov v texte
st.subheader("Pozorovan√© v√Ωstupy")
for outcome in counts:
    st.write(f"{outcome} bolo pozorovan√© {counts[outcome]} kr√°t")
