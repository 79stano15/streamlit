import streamlit as st
from qiskit import QuantumCircuit, Aer, transpile
from qiskit.visualization import plot_histogram
import matplotlib.pyplot as plt

# Nastavenie str√°nky Streamlit
st.title("Deutschov Algoritmus s Qiskit üöÄ")
st.header("Kvantov√Ω obvod")

# Funkcia na vytvorenie Oracle oper√°torov
def constant_oracle(is_one):
    """Kon≈°tantn√Ω Oracle"""
    qc = QuantumCircuit(2)
    if is_one:
        qc.x(1)  # Ak je kon≈°tantn√° 1, invertuj druh√Ω qubit
    return qc.to_gate(label="Const")

def balanced_oracle():
    """Vyv√°≈æen√Ω Oracle"""
    qc = QuantumCircuit(2)
    qc.cx(0, 1)  # CNOT br√°na: Vyv√°≈æen√© spr√°vanie
    return qc.to_gate(label="Balanced")

# Funkcia na vytvorenie Deutschovho algoritmu
def deutsch_algorithm(oracle):
    qc = QuantumCircuit(2, 1)  # 2 qubity, 1 klasick√Ω register
    qc.x(1)                    # Inicializuj druh√Ω qubit do stavu |1‚ü©
    qc.h([0, 1])               # Hadamard na oba qubity
    qc.append(oracle, [0, 1])  # Aplikuj Oracle
    qc.h(0)                    # Hadamard na prv√Ω qubit
    qc.measure(0, 0)           # Meraj prv√Ω qubit
    return qc

# V√Ωber Oracle z Streamlit rozhrania
st.sidebar.header("Vyber Oracle")
oracle_choice = st.sidebar.selectbox(
    "Zvoƒæ Oracle:", ["Constant Zero", "Constant One", "Balanced"]
)

# Vyber spr√°vny Oracle na z√°klade voƒæby pou≈æ√≠vateƒæa
if oracle_choice == "Constant Zero":
    oracle = constant_oracle(is_one=False)
elif oracle_choice == "Constant One":
    oracle = constant_oracle(is_one=True)
else:
    oracle = balanced_oracle()

# Vytvor Deutschov algoritmus s vybran√Ωm Oracle
qc = deutsch_algorithm(oracle)

# Zobrazenie kvantov√©ho obvodu
st.subheader(f"Vybran√Ω Oracle: {oracle_choice}")
st.pyplot(qc.draw(output='mpl'))

# Simul√°cia v√Ωsledkov pomocou AerSimulator
simulator = Aer.get_backend('aer_simulator')
compiled_circuit = transpile(qc, simulator)
job = simulator.run(compiled_circuit, shots=1024)
result = job.result()
counts = result.get_counts()

# Zobrazenie histogramu v√Ωsledkov
st.header("V√Ωsledky simul√°cie")
fig, ax = plt.subplots()
plot_histogram(counts, ax=ax)
st.pyplot(fig)

# Zobrazenie v√Ωstupov v texte
st.subheader("Pozorovan√© v√Ωstupy")
for outcome in counts:
    st.write(f"{outcome} bolo pozorovan√© {counts[outcome]} kr√°t")
